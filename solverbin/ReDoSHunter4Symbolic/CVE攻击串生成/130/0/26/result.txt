Vulnerable
Attack String :"/*# sourceMappingURL= "+"\t"*10000+""
prefix :SmtNode{intersectionRegexes=[(\/\*\s*# sourceMappingURL=)(((.*)ï¼†[\s\S]{1,}))]}
prefix : (re.++  (re.++  (str.to.re "\x5c\x2f") (re.++  (str.to.re "\x5c\x2a") (re.++ (re.* (re.union (re.range "\t" "\t") (re.range "\n" "\n") (re.range "\r" "\r") (str.to.re " ")) ) (re.++  (str.to.re "\x23") (re.++  (str.to.re "\x20") (re.++  (str.to.re "\x73") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x75") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x63") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x4d") (re.++  (str.to.re "\x61") (re.++  (str.to.re "\x70") (re.++  (str.to.re "\x70") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x6e") (re.++  (str.to.re "\x67") (re.++  (str.to.re "\x55") (re.++  (str.to.re "\x52") (re.++  (str.to.re "\x4c")  (str.to.re "\x3d"))))))))))))))))))))))  (re.inter (re.* re.allchar )  (re.++   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) (re.*   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) ))))
infix :SmtNode{intersectionRegexes=[([^
]*)&(([^
]*)()([ 
	]*))&([ 
	]*)&(.+)]}
infix : (re.++ (re.*  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")) ) (re.++  (str.to.re "\x26") (re.++  (re.++ (re.*  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")) ) (re.++  (re.*  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b")))))) ))) (re.++  (str.to.re "\x26") (re.++ (re.*  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b")))))) ) (re.++  (str.to.re "\x26") (re.+ re.allchar )))))))
suffix :SmtNode{intersectionRegexes=[]}
suffix :
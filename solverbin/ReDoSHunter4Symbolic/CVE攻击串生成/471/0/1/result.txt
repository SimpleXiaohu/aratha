Vulnerable
Attack String :";SmartPad"+"000"*5000+"/"
prefix :SmtNode{intersectionRegexes=[;SmartPad]}
prefix : (re.++  (str.to.re "\x3b") (re.++  (str.to.re "\x53") (re.++  (str.to.re "\x6d") (re.++  (str.to.re "\x61") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x74") (re.++  (str.to.re "\x50") (re.++  (str.to.re "\x61")  (str.to.re "\x64")))))))))
infix :SmtNode{intersectionRegexes=[\d{2,}, (\d{2,})([^\/;]+), [^\/;]+]}
infix :(re.inter  (re.++  (re.++ (re.range "0" "9") (re.range "0" "9")) (re.*  (re.++ (re.range "0" "9") (re.range "0" "9")) ))  (re.++  (re.++  (re.++ (re.range "0" "9") (re.range "0" "9")) (re.*  (re.++ (re.range "0" "9") (re.range "0" "9")) )) (re.+  (re.union  (str.to.re "\x5c\x2f")  (str.to.re "\x3b")) )) (re.+  (re.union  (str.to.re "\x5c\x2f")  (str.to.re "\x3b")) ) )
suffix :SmtNode{intersectionRegexes=[000[\s\S]*＆～([^\/;]+), 000[\s\S]*＆～(([^\/;]+)(( Build|\) AppleWebKit)))]}
suffix :(re.inter  (re.inter  (re.++  (str.to.re "\x30") (re.++  (str.to.re "\x30") (re.++  (str.to.re "\x30") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )))) (re.comp (re.+  (re.union  (str.to.re "\x5c\x2f")  (str.to.re "\x3b")) )))  (re.inter  (re.++  (str.to.re "\x30") (re.++  (str.to.re "\x30") (re.++  (str.to.re "\x30") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )))) (re.comp  (re.++ (re.+  (re.union  (str.to.re "\x5c\x2f")  (str.to.re "\x3b")) )  (re.union  (re.++  (str.to.re "\x20") (re.++  (str.to.re "\x42") (re.++  (str.to.re "\x75") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x6c")  (str.to.re "\x64"))))))  (re.++  (str.to.re "\x5c\x29") (re.++  (str.to.re "\x20") (re.++  (str.to.re "\x41") (re.++  (str.to.re "\x70") (re.++  (str.to.re "\x70") (re.++  (str.to.re "\x6c") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x57") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x62") (re.++  (str.to.re "\x4b") (re.++  (str.to.re "\x69")  (str.to.re "\x74"))))))))))))))))) )
Vulnerable
Attack String :""+"/"*10000+"A/A"
prefix :SmtNode{intersectionRegexes=[]}
prefix :
infix :SmtNode{intersectionRegexes=[(([ 
	]|[^ 
	])*)&((([ 
	]|[^ 
	])*)((((\.{1,}|[^\/]+)?)((\.[^\/\.]*)?)))((\/)*))&((\/)*)&(.+)]}
infix : (re.++ (re.*  (re.union  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b"))))))  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b"))))))) ) (re.++  (str.to.re "\x26") (re.++  (re.++ (re.*  (re.union  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b"))))))  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b"))))))) ) (re.++  (re.++ (re.opt  (re.union  (re.++   (str.to.re "\x5c\x2e") (re.*   (str.to.re "\x5c\x2e") )) (re.+  (str.to.re "\x5c\x2f") )) ) (re.opt  (re.++  (str.to.re "\x5c\x2e") (re.*  (re.union  (str.to.re "\x5c\x2f")  (str.to.re "\x5c\x2e")) )) )) (re.*  (str.to.re "\x5c\x2f") ))) (re.++  (str.to.re "\x26") (re.++ (re.*  (str.to.re "\x5c\x2f") ) (re.++  (str.to.re "\x26") (re.+ re.allchar )))))))
suffix :SmtNode{intersectionRegexes=[A/A]}
suffix : (re.++  (str.to.re "\x41") (re.++  (str.to.re "\x2f")  (str.to.re "\x41")))
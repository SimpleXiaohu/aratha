Vulnerable
Attack String :" "+"\u0000."*5000+"!/A!/A"
prefix :SmtNode{intersectionRegexes=[(((\/?)?))(((([\s\S]*))ï¼†[\s\S]{1,}))]}
prefix : (re.++ (re.opt (re.opt  (str.to.re "\x5c\x2f") ) )  (re.inter (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )  (re.++   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) (re.*   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) ))))
infix :SmtNode{intersectionRegexes=[(((([ 
	]|[^ 
	])*)[^\/]+)([^\/\.]*))&(((([ 
	]|[^ 
	])*)[^\/]+)(\.)([^\/\.]*))&(.+)]}
infix : (re.++  (re.++  (re.++ (re.*  (re.union  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b"))))))  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b"))))))) ) (re.+  (str.to.re "\x5c\x2f") )) (re.*  (re.union  (str.to.re "\x5c\x2f")  (str.to.re "\x5c\x2e")) )) (re.++  (str.to.re "\x26") (re.++  (re.++  (re.++ (re.*  (re.union  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b"))))))  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b"))))))) ) (re.+  (str.to.re "\x5c\x2f") )) (re.++  (str.to.re "\x5c\x2e") (re.*  (re.union  (str.to.re "\x5c\x2f")  (str.to.re "\x5c\x2e")) ))) (re.++  (str.to.re "\x26") (re.+ re.allchar )))))
suffix :SmtNode{intersectionRegexes=[!/A!/A]}
suffix : (re.++  (str.to.re "\x21") (re.++  (str.to.re "\x2f") (re.++  (str.to.re "\x41") (re.++  (str.to.re "\x21") (re.++  (str.to.re "\x2f")  (str.to.re "\x41"))))))
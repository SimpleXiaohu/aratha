Vulnerable
Attack String :";SC- "+"0"*10000+""
prefix :SmtNode{intersectionRegexes=[(; *(SC)\-)([ 0-9A-Za-z]+)]}
prefix : (re.++  (re.++  (str.to.re "\x3b") (re.++ (re.*  (str.to.re "\x20") ) (re.++  (re.++  (str.to.re "\x53")  (str.to.re "\x43"))  (str.to.re "\x5c\x2d")))) (re.+  (re.union  (str.to.re "\x20") (re.union (re.range "\x30" "\x39") (re.union (re.range "\x41" "\x5a") (re.range "\x61" "\x7a")))) ))
infix :SmtNode{intersectionRegexes=[(( |[0-9]|[A-Z]|[a-z])+)&((( |[0-9]|[A-Z]|[a-z])+)(\/?)([^ ]*))&([^ ]*)&(.+)]}
infix : (re.++ (re.+  (re.union  (str.to.re "\x20") (re.union (re.range "\x30" "\x39") (re.union (re.range "\x41" "\x5a") (re.range "\x61" "\x7a")))) ) (re.++  (str.to.re "\x26") (re.++  (re.++ (re.+  (re.union  (str.to.re "\x20") (re.union (re.range "\x30" "\x39") (re.union (re.range "\x41" "\x5a") (re.range "\x61" "\x7a")))) ) (re.++ (re.opt  (str.to.re "\x5c\x2f") ) (re.*  (str.to.re "\x20") ))) (re.++  (str.to.re "\x26") (re.++ (re.*  (str.to.re "\x20") ) (re.++  (str.to.re "\x26") (re.+ re.allchar )))))))
suffix :SmtNode{intersectionRegexes=[]}
suffix :
Vulnerable
Attack String :"; "+" "*10000+"/"
prefix :SmtNode{intersectionRegexes=[(;)((( *)＆[\s\S]{1,}))]}
prefix : (re.++  (str.to.re "\x3b")  (re.inter (re.*  (str.to.re "\x20") )  (re.++   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) (re.*   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) ))))
infix :SmtNode{intersectionRegexes=[ *, ( *)([^\/;]+), [^\/;]+]}
infix :(re.inter (re.*  (str.to.re "\x20") )  (re.++ (re.*  (str.to.re "\x20") ) (re.+  (re.union  (str.to.re "\x5c\x2f")  (str.to.re "\x3b")) )) (re.+  (re.union  (str.to.re "\x5c\x2f")  (str.to.re "\x3b")) ) )
suffix :SmtNode{intersectionRegexes=[ [\s\S]*＆～([^\/;]+),  [\s\S]*＆～(([^\/;]+)( Build\/HCL))]}
suffix :(re.inter  (re.inter  (re.++  (str.to.re "\x20") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )) (re.comp (re.+  (re.union  (str.to.re "\x5c\x2f")  (str.to.re "\x3b")) )))  (re.inter  (re.++  (str.to.re "\x20") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )) (re.comp  (re.++ (re.+  (re.union  (str.to.re "\x5c\x2f")  (str.to.re "\x3b")) )  (re.++  (str.to.re "\x20") (re.++  (str.to.re "\x42") (re.++  (str.to.re "\x75") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x6c") (re.++  (str.to.re "\x64") (re.++  (str.to.re "\x5c\x2f") (re.++  (str.to.re "\x48") (re.++  (str.to.re "\x43")  (str.to.re "\x4c"))))))))))))) )
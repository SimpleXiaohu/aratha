Vulnerable
Attack String :"<span\tstyle="mso-spacerun:yes"> "+"\r"*5000+"\u0000"
prefix :SmtNode{intersectionRegexes=[(<span\s+style=["']mso-spacerun:yes["']>)((([\s]*)＆[\s\S]{1,}))]}
prefix : (re.++  (re.++  (str.to.re "\x3c") (re.++  (str.to.re "\x73") (re.++  (str.to.re "\x70") (re.++  (str.to.re "\x61") (re.++  (str.to.re "\x6e") (re.++ (re.+ (re.union (re.range "\t" "\t") (re.range "\n" "\n") (re.range "\r" "\r") (str.to.re " ")) ) (re.++  (str.to.re "\x73") (re.++  (str.to.re "\x74") (re.++  (str.to.re "\x79") (re.++  (str.to.re "\x6c") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x3d") (re.++  (re.union  (str.to.re "\x22")  (str.to.re "\x27")) (re.++  (str.to.re "\x6d") (re.++  (str.to.re "\x73") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x2d") (re.++  (str.to.re "\x73") (re.++  (str.to.re "\x70") (re.++  (str.to.re "\x61") (re.++  (str.to.re "\x63") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x75") (re.++  (str.to.re "\x6e") (re.++  (str.to.re "\x3a") (re.++  (str.to.re "\x79") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x73") (re.++  (re.union  (str.to.re "\x22")  (str.to.re "\x27"))  (str.to.re "\x3e")))))))))))))))))))))))))))))))  (re.inter (re.* (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) )  (re.++   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) (re.*   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) ))))
infix :SmtNode{intersectionRegexes=[([\s]*)(\s*), ([\s]*)([\n\r]+)(\s*)]}
infix :(re.inter  (re.++ (re.* (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) ) (re.* (re.union (re.range "\t" "\t") (re.range "\n" "\n") (re.range "\r" "\r") (str.to.re " ")) ))  (re.++ (re.* (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) ) (re.++ (re.+  (re.union  (str.to.re "\x5c\x6e")  (str.to.re "\x5c\x72")) ) (re.* (re.union (re.range "\t" "\t") (re.range "\n" "\n") (re.range "\r" "\r") (str.to.re " ")) ))) )
suffix :SmtNode{intersectionRegexes=[
[\s\S]*＆～(((\s*)＆[\s\S]{1,})), 
[\s\S]*＆～((((\s*)＆[\s\S]{1,}))(<\/span>))]}
suffix :(re.inter  (re.inter  (re.++  (str.to.re "\x0a") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )) (re.comp  (re.inter (re.* (re.union (re.range "\t" "\t") (re.range "\n" "\n") (re.range "\r" "\r") (str.to.re " ")) )  (re.++   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) (re.*   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )))))  (re.inter  (re.++  (str.to.re "\x0a") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )) (re.comp  (re.++  (re.inter (re.* (re.union (re.range "\t" "\t") (re.range "\n" "\n") (re.range "\r" "\r") (str.to.re " ")) )  (re.++   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) (re.*   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )))  (re.++  (str.to.re "\x3c") (re.++  (str.to.re "\x5c\x2f") (re.++  (str.to.re "\x73") (re.++  (str.to.re "\x70") (re.++  (str.to.re "\x61") (re.++  (str.to.re "\x6e")  (str.to.re "\x3e")))))))))) )
Vulnerable
Attack String :"CPU OS 0.0.0"+"0"*10000+"\r"
prefix :SmtNode{intersectionRegexes=[((CPU[ +]OS|iPhone[ +]OS|CPU[ +]iPhone)[ +]+(\d+)[\._](\d+)[\._])(\d+)]}
prefix : (re.++  (re.++  (re.union  (re.++  (str.to.re "\x43") (re.++  (str.to.re "\x50") (re.++  (str.to.re "\x55") (re.++  (re.union  (str.to.re "\x20")  (str.to.re "\x2b")) (re.++  (str.to.re "\x4f")  (str.to.re "\x53")))))) (re.union  (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x50") (re.++  (str.to.re "\x68") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x6e") (re.++  (str.to.re "\x65") (re.++  (re.union  (str.to.re "\x20")  (str.to.re "\x2b")) (re.++  (str.to.re "\x4f")  (str.to.re "\x53")))))))))  (re.++  (str.to.re "\x43") (re.++  (str.to.re "\x50") (re.++  (str.to.re "\x55") (re.++  (re.union  (str.to.re "\x20")  (str.to.re "\x2b")) (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x50") (re.++  (str.to.re "\x68") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x6e")  (str.to.re "\x65")))))))))))) (re.++ (re.+  (re.union  (str.to.re "\x20")  (str.to.re "\x2b")) ) (re.++ (re.+ (re.range "0" "9") ) (re.++  (re.union  (str.to.re "\x5c\x2e")  (str.to.re "\x5f")) (re.++ (re.+ (re.range "0" "9") )  (re.union  (str.to.re "\x5c\x2e")  (str.to.re "\x5f"))))))) (re.+ (re.range "0" "9") ))
infix :SmtNode{intersectionRegexes=[([0-9]+)&(([0-9]+)()([^
]*))&([^
]*)&(.+)]}
infix : (re.++ (re.+ (re.range "\x30" "\x39") ) (re.++  (str.to.re "\x26") (re.++  (re.++ (re.+ (re.range "\x30" "\x39") ) (re.++  (re.*  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")) ))) (re.++  (str.to.re "\x26") (re.++ (re.*  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")) ) (re.++  (str.to.re "\x26") (re.+ re.allchar )))))))
suffix :SmtNode{intersectionRegexes=[0[\s\S]*＆～(((.*)＆[\s\S]{1,})), 0[\s\S]*＆～((((.*)＆[\s\S]{1,}))(Outlook-iOS-Android))]}
suffix :(re.inter  (re.inter  (re.++  (str.to.re "\x30") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )) (re.comp  (re.inter (re.* re.allchar )  (re.++   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) (re.*   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )))))  (re.inter  (re.++  (str.to.re "\x30") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )) (re.comp  (re.++  (re.inter (re.* re.allchar )  (re.++   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) (re.*   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )))  (re.++  (str.to.re "\x4f") (re.++  (str.to.re "\x75") (re.++  (str.to.re "\x74") (re.++  (str.to.re "\x6c") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x6b") (re.++  (str.to.re "\x2d") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x4f") (re.++  (str.to.re "\x53") (re.++  (str.to.re "\x2d") (re.++  (str.to.re "\x41") (re.++  (str.to.re "\x6e") (re.++  (str.to.re "\x64") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x69")  (str.to.re "\x64")))))))))))))))))))))) )
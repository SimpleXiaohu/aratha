Vulnerable
Attack String :","+","*1024+"\r"
prefix :SmtNode{intersectionRegexes=[(.*,)]}
prefix : (re.++ (re.* re.allchar )  (str.to.re "\x2c"))
infix :SmtNode{intersectionRegexes=[], next=SmtNode{intersectionRegexes=[.*, ,], next=SmtNode{intersectionRegexes=[], next=SmtNode{intersectionRegexes=[]}}}}
infix : (re.inter (re.* re.allchar )  (str.to.re "\x2c") )  
suffix :SmtNode{intersectionRegexes=[,[\s\S]*＆～(.*,), ,[\s\S]*＆～((.*,)((.+)?))]}
suffix :(re.inter  (re.inter  (re.++  (str.to.re "\x2c") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )) (re.comp  (re.++ (re.* re.allchar )  (str.to.re "\x2c"))))  (re.inter  (re.++  (str.to.re "\x2c") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )) (re.comp  (re.++  (re.++ (re.* re.allchar )  (str.to.re "\x2c")) (re.opt (re.+ re.allchar ) )))) )
Vulnerable
Attack String :" "+","*5000+" "
prefix :SmtNode{intersectionRegexes=[(((.*)＆[\s\S]{1,}))]}
prefix : (re.inter (re.* re.allchar )  (re.++   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) (re.*   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )))
infix :SmtNode{intersectionRegexes=[(([^
]*)(( |	)*))&(([^
]*)(,)(( |	)*))&(.+)]}
infix : (re.++  (re.++ (re.*  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")) ) (re.*  (re.union  (str.to.re "\x20")  (str.to.re "\x09")) )) (re.++  (str.to.re "\x26") (re.++  (re.++ (re.*  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")) ) (re.++  (str.to.re "\x2c") (re.*  (re.union  (str.to.re "\x20")  (str.to.re "\x09")) ))) (re.++  (str.to.re "\x26") (re.+ re.allchar )))))
suffix :SmtNode{intersectionRegexes=[,[\s\S]*＆～((([ \t]*)＆[\s\S]{1,})), ,[\s\S]*＆～(((([ \t]*)＆[\s\S]{1,}))(([^ \t]+)[ \t]+realm=(["\']?)([^"\']*)(["\']?)))]}
suffix :(re.inter  (re.inter  (re.++  (str.to.re "\x2c") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )) (re.comp  (re.inter (re.*  (re.union  (str.to.re "\x20")  (str.to.re "\x5c\x74")) )  (re.++   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) (re.*   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )))))  (re.inter  (re.++  (str.to.re "\x2c") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )) (re.comp  (re.++  (re.inter (re.*  (re.union  (str.to.re "\x20")  (str.to.re "\x5c\x74")) )  (re.++   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) (re.*   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )))  (re.++ (re.+  (re.union  (str.to.re "\x20")  (str.to.re "\x5c\x74")) ) (re.++ (re.+  (re.union  (str.to.re "\x20")  (str.to.re "\x5c\x74")) ) (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x61") (re.++  (str.to.re "\x6c") (re.++  (str.to.re "\x6d") (re.++  (str.to.re "\x3d") (re.++ (re.opt  (re.union  (str.to.re "\x22")  (str.to.re "\x5c\x27")) ) (re.++ (re.*  (re.union  (str.to.re "\x22")  (str.to.re "\x5c\x27")) ) (re.opt  (re.union  (str.to.re "\x22")  (str.to.re "\x5c\x27")) )))))))))))))) )
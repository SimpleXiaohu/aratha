Vulnerable
Attack String :"Windows Phone A; IEMobile/A;NOKIA;"+" "*10000+")"
prefix :SmtNode{intersectionRegexes=[Windows Phone A; IEMobile/A;NOKIA;]}
prefix : (re.++  (str.to.re "\x57") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x6e") (re.++  (str.to.re "\x64") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x77") (re.++  (str.to.re "\x73") (re.++  (str.to.re "\x20") (re.++  (str.to.re "\x50") (re.++  (str.to.re "\x68") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x6e") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x20") (re.++  (str.to.re "\x41") (re.++  (str.to.re "\x3b") (re.++  (str.to.re "\x20") (re.++  (str.to.re "\x49") (re.++  (str.to.re "\x45") (re.++  (str.to.re "\x4d") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x62") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x6c") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x2f") (re.++  (str.to.re "\x41") (re.++  (str.to.re "\x3b") (re.++  (str.to.re "\x4e") (re.++  (str.to.re "\x4f") (re.++  (str.to.re "\x4b") (re.++  (str.to.re "\x49") (re.++  (str.to.re "\x41")  (str.to.re "\x3b"))))))))))))))))))))))))))))))))))
infix :SmtNode{intersectionRegexes=[( *)&(( *)((NOKIA ?|Nokia ?|LUMIA ?|(L|l)umia ?)*)([^;\)]+))&([^;\)]+)&(.+)]}
infix : (re.++ (re.*  (str.to.re "\x20") ) (re.++  (str.to.re "\x26") (re.++  (re.++ (re.*  (str.to.re "\x20") ) (re.++ (re.*  (re.union  (re.++  (str.to.re "\x4e") (re.++  (str.to.re "\x4f") (re.++  (str.to.re "\x4b") (re.++  (str.to.re "\x49") (re.++  (str.to.re "\x41") (re.opt  (str.to.re "\x20") )))))) (re.union  (re.++  (str.to.re "\x4e") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x6b") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x61") (re.opt  (str.to.re "\x20") )))))) (re.union  (re.++  (str.to.re "\x4c") (re.++  (str.to.re "\x55") (re.++  (str.to.re "\x4d") (re.++  (str.to.re "\x49") (re.++  (str.to.re "\x41") (re.opt  (str.to.re "\x20") ))))))  (re.++  (re.union  (str.to.re "\x4c")  (str.to.re "\x6c")) (re.++  (str.to.re "\x75") (re.++  (str.to.re "\x6d") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x61") (re.opt  (str.to.re "\x20") ))))))))) ) (re.+  (re.union  (str.to.re "\x3b")  (str.to.re "\x5c\x29")) ))) (re.++  (str.to.re "\x26") (re.++ (re.+  (re.union  (str.to.re "\x3b")  (str.to.re "\x5c\x29")) ) (re.++  (str.to.re "\x26") (re.+ re.allchar )))))))
suffix :SmtNode{intersectionRegexes=[ [\s\S]*＆～([^;\)]+)]}
suffix : (re.inter  (re.++  (str.to.re "\x20") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )) (re.comp (re.+  (re.union  (str.to.re "\x3b")  (str.to.re "\x5c\x29")) )))
Vulnerable
Attack String :"= ="+"\n\t\t\t\t\t\t"*1024+"!"
prefix :SmtNode{intersectionRegexes=[= =]}
prefix : (re.++  (str.to.re "\x3d") (re.++  (str.to.re "\x20")  (str.to.re "\x3d")))
infix :SmtNode{intersectionRegexes=[((?
|))&(.{0,})], next=SmtNode{intersectionRegexes=[([ 
	]*)&([^
]+)&(.{6,})], next=SmtNode{intersectionRegexes=[()&(.{0,})], next=SmtNode{intersectionRegexes=[()&(.{0,})]}}}}
infix : (re.++  (re.union  (re.++ (re.opt  (str.to.re "\x0d") )  (str.to.re "\x0a"))  (str.to.re "\x0d")) (re.++  (str.to.re "\x26")  (re.++ "" (re.* "" ))))  (re.++ (re.*  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b")))))) ) (re.++  (str.to.re "\x26") (re.++ (re.+  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")) ) (re.++  (str.to.re "\x26")  (re.++  (re.++ re.allchar (re.++ re.allchar (re.++ re.allchar (re.++ re.allchar (re.++ re.allchar re.allchar))))) (re.*  (re.++ re.allchar (re.++ re.allchar (re.++ re.allchar (re.++ re.allchar (re.++ re.allchar re.allchar))))) ))))))  (re.++  (re.++  (str.to.re "\x26")  (re.++ "" (re.* "" ))))  (re.++  (re.++  (str.to.re "\x26")  (re.++ "" (re.* "" ))))
suffix :SmtNode{intersectionRegexes=[!]}
suffix : (str.to.re "\x21")
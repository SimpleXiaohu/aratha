Vulnerable
Attack String :"android\u0000mipad "+" "*5000+"@"
prefix :SmtNode{intersectionRegexes=[(android.+mi[\-\s_]*(pad))((([\s_]*)ï¼†[\s\S]{1,}))]}
prefix : (re.++  (re.++  (str.to.re "\x61") (re.++  (str.to.re "\x6e") (re.++  (str.to.re "\x64") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x64") (re.++ (re.+ re.allchar ) (re.++  (str.to.re "\x6d") (re.++  (str.to.re "\x69") (re.++ (re.*  (re.union  (str.to.re "\x5c\x2d") (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))  (str.to.re "\x5f"))) )  (re.++  (str.to.re "\x70") (re.++  (str.to.re "\x61")  (str.to.re "\x64"))))))))))))))  (re.inter (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))  (str.to.re "\x5f")) )  (re.++   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) (re.*   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) ))))
infix :SmtNode{intersectionRegexes=[[\s_]*, ([\s_]*)([\s\w]+), [\s\w]+]}
infix :(re.inter (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))  (str.to.re "\x5f")) )  (re.++ (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))  (str.to.re "\x5f")) ) (re.+  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.union (re.range "a" "z") (re.range "A" "Z") (re.range "0" "9") (str.to.re "_"))) )) (re.+  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.union (re.range "a" "z") (re.range "A" "Z") (re.range "0" "9") (str.to.re "_"))) ) )
suffix :SmtNode{intersectionRegexes=[@]}
suffix : (str.to.re "\x40")
Vulnerable
Attack String :"[\u0000"+"[[]"*32+"A"
prefix :SmtNode{intersectionRegexes=[(([ \t]*)\[)(([`"$'])([^\\]|\\.)*([`"$'])|\[([^\\\]]|\\.)*\]|[^\\\]]|\\.)]}
prefix : (re.++  (re.++ (re.*  (re.union  (str.to.re "\x20")  (str.to.re "\x5c\x74")) )  (str.to.re "\x5c\x5b"))  (re.union  (re.++  (re.union  (str.to.re "\x60") (re.union  (str.to.re "\x22") (re.union  (str.to.re "\x24")  (str.to.re "\x27")))) (re.++ (re.*  (re.union  (str.to.re "\x5c\x5c")  (re.++  (str.to.re "\x5c\x5c") re.allchar)) )  (re.union  (str.to.re "\x60") (re.union  (str.to.re "\x22") (re.union  (str.to.re "\x24")  (str.to.re "\x27")))))) (re.union  (re.++  (str.to.re "\x5c\x5b") (re.++ (re.*  (re.union  (re.union  (str.to.re "\x5c\x5c")  (str.to.re "\x5c\x5d"))  (re.++  (str.to.re "\x5c\x5c") re.allchar)) )  (str.to.re "\x5c\x5d"))) (re.union  (re.union  (str.to.re "\x5c\x5c")  (str.to.re "\x5c\x5d"))  (re.++  (str.to.re "\x5c\x5c") re.allchar)))))
infix :SmtNode{intersectionRegexes=[], next=SmtNode{intersectionRegexes=[((((`|\"|\$|'))((((`|\"|\$|')))?[^\\]|\\[^
])*((`|\"|\$|'))|\\[^
]|[^\\\]])+(((`|\"|\$|'))((((`|\"|\$|')))?[^\\]|\\[^
])*((`|\"|\$|'))|\\[^
]|\[([^\\\]]|\\[^
])*\])+)&((((`|\"|\$|'))((((`|\"|\$|')))?[^\\]|\\[^
])*((`|\"|\$|'))|\\[^
]|\[([^\\\]]|\\[^
])*\])+)&(\[.*)&(.{0,})], next=SmtNode{intersectionRegexes=[()&(.{0,})]}}}
infix :  (re.++  (re.++ (re.+  (re.union  (re.++  (re.union  (str.to.re "\x60") (re.union  (str.to.re "\x5c\x22") (re.union  (str.to.re "\x5c\x24")  (str.to.re "\x27")))) (re.++ (re.*  (re.union  (re.++ (re.opt  (re.union  (str.to.re "\x60") (re.union  (str.to.re "\x5c\x22") (re.union  (str.to.re "\x5c\x24")  (str.to.re "\x27")))) )  (str.to.re "\x5c\x5c"))  (re.++  (str.to.re "\x5c\x5c")  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")))) )  (re.union  (str.to.re "\x60") (re.union  (str.to.re "\x5c\x22") (re.union  (str.to.re "\x5c\x24")  (str.to.re "\x27")))))) (re.union  (re.++  (str.to.re "\x5c\x5c")  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")))  (re.union  (str.to.re "\x5c\x5c")  (str.to.re "\x5c\x5d")))) ) (re.+  (re.union  (re.++  (re.union  (str.to.re "\x60") (re.union  (str.to.re "\x5c\x22") (re.union  (str.to.re "\x5c\x24")  (str.to.re "\x27")))) (re.++ (re.*  (re.union  (re.++ (re.opt  (re.union  (str.to.re "\x60") (re.union  (str.to.re "\x5c\x22") (re.union  (str.to.re "\x5c\x24")  (str.to.re "\x27")))) )  (str.to.re "\x5c\x5c"))  (re.++  (str.to.re "\x5c\x5c")  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")))) )  (re.union  (str.to.re "\x60") (re.union  (str.to.re "\x5c\x22") (re.union  (str.to.re "\x5c\x24")  (str.to.re "\x27")))))) (re.union  (re.++  (str.to.re "\x5c\x5c")  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")))  (re.++  (str.to.re "\x5c\x5b") (re.++ (re.*  (re.union  (re.union  (str.to.re "\x5c\x5c")  (str.to.re "\x5c\x5d"))  (re.++  (str.to.re "\x5c\x5c")  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")))) )  (str.to.re "\x5c\x5d"))))) )) (re.++  (str.to.re "\x26") (re.++ (re.+  (re.union  (re.++  (re.union  (str.to.re "\x60") (re.union  (str.to.re "\x5c\x22") (re.union  (str.to.re "\x5c\x24")  (str.to.re "\x27")))) (re.++ (re.*  (re.union  (re.++ (re.opt  (re.union  (str.to.re "\x60") (re.union  (str.to.re "\x5c\x22") (re.union  (str.to.re "\x5c\x24")  (str.to.re "\x27")))) )  (str.to.re "\x5c\x5c"))  (re.++  (str.to.re "\x5c\x5c")  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")))) )  (re.union  (str.to.re "\x60") (re.union  (str.to.re "\x5c\x22") (re.union  (str.to.re "\x5c\x24")  (str.to.re "\x27")))))) (re.union  (re.++  (str.to.re "\x5c\x5c")  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")))  (re.++  (str.to.re "\x5c\x5b") (re.++ (re.*  (re.union  (re.union  (str.to.re "\x5c\x5c")  (str.to.re "\x5c\x5d"))  (re.++  (str.to.re "\x5c\x5c")  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")))) )  (str.to.re "\x5c\x5d"))))) ) (re.++  (str.to.re "\x26") (re.++  (re.++  (str.to.re "\x5c\x5b") (re.* re.allchar )) (re.++  (str.to.re "\x26")  (re.++ "" (re.* "" ))))))))  (re.++  (re.++  (str.to.re "\x26")  (re.++ "" (re.* "" ))))
suffix :SmtNode{intersectionRegexes=[A]}
suffix : (str.to.re "\x41")
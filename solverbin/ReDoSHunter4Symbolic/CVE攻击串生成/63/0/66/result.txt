Vulnerable
Attack String :"""+"#{\u0000}\u0000"*32+"◎!}!\\}◎!}!\\}"
prefix :SmtNode{intersectionRegexes=["]}
prefix : (str.to.re "\x22")
infix :SmtNode{intersectionRegexes=[], next=SmtNode{intersectionRegexes=[((\\(
|((| |
||	|)|[^ 
	]))|\#\{[^\}]+\})+(\\(
|((| |
||	|)|[^ 
	]))|((\"|'))?[^\\
])+)&((\\(
|((| |
||	|)|[^ 
	]))|((\"|'))?[^\\
])+)&(\#.*)&(.{0,})], next=SmtNode{intersectionRegexes=[()&(.{0,})]}}}
infix :  (re.++  (re.++ (re.+  (re.union  (re.++  (str.to.re "\x5c\x5c")  (re.union  (re.++  (str.to.re "\x0d")  (str.to.re "\x0a"))  (re.union  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b"))))))  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b")))))))))  (re.++  (str.to.re "\x5c\x23") (re.++  (str.to.re "\x5c\x7b") (re.++ (re.+  (str.to.re "\x5c\x7d") )  (str.to.re "\x5c\x7d"))))) ) (re.+  (re.union  (re.++  (str.to.re "\x5c\x5c")  (re.union  (re.++  (str.to.re "\x0d")  (str.to.re "\x0a"))  (re.union  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b"))))))  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b")))))))))  (re.++ (re.opt  (re.union  (str.to.re "\x5c\x22")  (str.to.re "\x27")) )  (re.union  (str.to.re "\x5c\x5c") (re.union  (str.to.re "\x0a")  (str.to.re "\x0d"))))) )) (re.++  (str.to.re "\x26") (re.++ (re.+  (re.union  (re.++  (str.to.re "\x5c\x5c")  (re.union  (re.++  (str.to.re "\x0d")  (str.to.re "\x0a"))  (re.union  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b"))))))  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b")))))))))  (re.++ (re.opt  (re.union  (str.to.re "\x5c\x22")  (str.to.re "\x27")) )  (re.union  (str.to.re "\x5c\x5c") (re.union  (str.to.re "\x0a")  (str.to.re "\x0d"))))) ) (re.++  (str.to.re "\x26") (re.++  (re.++  (str.to.re "\x5c\x23") (re.* re.allchar )) (re.++  (str.to.re "\x26")  (re.++ "" (re.* "" ))))))))  (re.++  (re.++  (str.to.re "\x26")  (re.++ "" (re.* "" ))))
suffix :SmtNode{intersectionRegexes=[◎!}!\}◎!}!\}]}
suffix : (re.++  (str.to.re "\x25ce") (re.++  (str.to.re "\x21") (re.++  (str.to.re "\x7d") (re.++  (str.to.re "\x21") (re.++  (str.to.re "\x5c\x7d") (re.++  (str.to.re "\x25ce") (re.++  (str.to.re "\x21") (re.++  (str.to.re "\x7d") (re.++  (str.to.re "\x21")  (str.to.re "\x5c\x7d"))))))))))
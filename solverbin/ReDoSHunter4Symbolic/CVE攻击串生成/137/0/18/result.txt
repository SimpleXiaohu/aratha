Vulnerable
Attack String :"# {code_example|"+"\t"*5000+"◎"
prefix :SmtNode{intersectionRegexes=[# {code_example|]}
prefix : (re.union  (re.++  (str.to.re "\x23") (re.++  (str.to.re "\x20") (re.++  (str.to.re "\x7b") (re.++  (str.to.re "\x63") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x64") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x5f") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x78") (re.++  (str.to.re "\x61") (re.++  (str.to.re "\x6d") (re.++  (str.to.re "\x70") (re.++  (str.to.re "\x6c")  (str.to.re "\x65"))))))))))))))) )
infix :SmtNode{intersectionRegexes=[([ 
	]*)&(([ 
	]*)()([^
]+))&([^
]+)&(.+)]}
infix : (re.++ (re.*  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b")))))) ) (re.++  (str.to.re "\x26") (re.++  (re.++ (re.*  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b")))))) ) (re.++  (re.+  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")) ))) (re.++  (str.to.re "\x26") (re.++ (re.+  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")) ) (re.++  (str.to.re "\x26") (re.+ re.allchar )))))))
suffix :SmtNode{intersectionRegexes=[◎]}
suffix : (str.to.re "\x25ce")
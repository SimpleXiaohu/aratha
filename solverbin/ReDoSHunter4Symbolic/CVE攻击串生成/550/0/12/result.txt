Vulnerable
Attack String :"Android 0.0-update1; AA-; "+" "*5000+""
prefix :SmtNode{intersectionRegexes=[(Android[ \-][\d]+\.[\d]+\-update1; [A-Za-z]{2}\-[A-Za-z]{0,2} *;)((( *)ï¼†[\s\S]{1,}))]}
prefix : (re.++  (re.++  (str.to.re "\x41") (re.++  (str.to.re "\x6e") (re.++  (str.to.re "\x64") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x64") (re.++  (re.union  (str.to.re "\x20")  (str.to.re "\x5c\x2d")) (re.++ (re.+ (re.range "0" "9") ) (re.++  (str.to.re "\x5c\x2e") (re.++ (re.+ (re.range "0" "9") ) (re.++  (str.to.re "\x5c\x2d") (re.++  (str.to.re "\x75") (re.++  (str.to.re "\x70") (re.++  (str.to.re "\x64") (re.++  (str.to.re "\x61") (re.++  (str.to.re "\x74") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x31") (re.++  (str.to.re "\x3b") (re.++  (str.to.re "\x20") (re.++  (re.++  (re.++  (re.union (re.range "\x41" "\x5a") (re.range "\x61" "\x7a"))  (re.union (re.range "\x41" "\x5a") (re.range "\x61" "\x7a"))) (re.*  (re.++  (re.union (re.range "\x41" "\x5a") (re.range "\x61" "\x7a"))  (re.union (re.range "\x41" "\x5a") (re.range "\x61" "\x7a"))) )) (re.++  (str.to.re "\x5c\x2d") (re.++  (re.union "" (re.union  (re.++  (re.union (re.range "\x41" "\x5a") (re.range "\x61" "\x7a"))  "")  (re.++  (re.union (re.range "\x41" "\x5a") (re.range "\x61" "\x7a"))   (re.++  (re.union (re.range "\x41" "\x5a") (re.range "\x61" "\x7a"))  "")))) (re.++ (re.*  (str.to.re "\x20") )  (str.to.re "\x3b"))))))))))))))))))))))))))  (re.inter (re.*  (str.to.re "\x20") )  (re.++   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) (re.*   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) ))))
infix :SmtNode{intersectionRegexes=[( *)&(( *)()([^
]+))&([^
]+)&(.+)]}
infix : (re.++ (re.*  (str.to.re "\x20") ) (re.++  (str.to.re "\x26") (re.++  (re.++ (re.*  (str.to.re "\x20") ) (re.++  (re.+  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")) ))) (re.++  (str.to.re "\x26") (re.++ (re.+  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")) ) (re.++  (str.to.re "\x26") (re.+ re.allchar )))))))
suffix :SmtNode{intersectionRegexes=[]}
suffix :
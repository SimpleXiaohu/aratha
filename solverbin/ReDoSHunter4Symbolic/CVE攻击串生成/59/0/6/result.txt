Vulnerable
Attack String :""\u0000"+"${\u0000}\u0000"*32+"!"A\\!A!\\!"A\\!A\\!"A\\!A!\\!"A\\!A\\!"
prefix :SmtNode{intersectionRegexes=[((["']))(\$\{([^"'}]|(["'])([^\\]|\\[\s\S])*(["']))+\}|[^\\]|\\[\s\S])]}
prefix : (re.++  (re.union  (str.to.re "\x22")  (str.to.re "\x27"))  (re.union  (re.++  (str.to.re "\x5c\x24") (re.++  (str.to.re "\x5c\x7b") (re.++ (re.+  (re.union  (re.union  (str.to.re "\x22") (re.union  (str.to.re "\x27")  (str.to.re "\x7d")))  (re.++  (re.union  (str.to.re "\x22")  (str.to.re "\x27")) (re.++ (re.*  (re.union  (str.to.re "\x5c\x5c")  (re.++  (str.to.re "\x5c\x5c")  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))))) )  (re.union  (str.to.re "\x22")  (str.to.re "\x27"))))) )  (str.to.re "\x5c\x7d")))) (re.union  (str.to.re "\x5c\x5c")  (re.++  (str.to.re "\x5c\x5c")  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")))))))))
infix :SmtNode{intersectionRegexes=[()&(.{0,})], next=SmtNode{intersectionRegexes=[((\\((| |
||	|)|[^ 
	])|\$\{([^\"'\}]|((\"|'))((((\"|')))?[^\\]|\\((| |
||	|)|[^ 
	]))*((\"|')))+\})+(\\((| |
||	|)|[^ 
	])|(((\"|')))?[^\\])+)&((\\((| |
||	|)|[^ 
	])|(((\"|')))?[^\\])+)&(\$.*)&(.{0,})], next=SmtNode{intersectionRegexes=[]}}}
infix : (re.++  (re.++  (str.to.re "\x26")  (re.++ "" (re.* "" ))))  (re.++  (re.++ (re.+  (re.union  (re.++  (str.to.re "\x5c\x5c")  (re.union  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b"))))))  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b"))))))))  (re.++  (str.to.re "\x5c\x24") (re.++  (str.to.re "\x5c\x7b") (re.++ (re.+  (re.union  (re.union  (str.to.re "\x5c\x22") (re.union  (str.to.re "\x27")  (str.to.re "\x5c\x7d")))  (re.++  (re.union  (str.to.re "\x5c\x22")  (str.to.re "\x27")) (re.++ (re.*  (re.union  (re.++ (re.opt  (re.union  (str.to.re "\x5c\x22")  (str.to.re "\x27")) )  (str.to.re "\x5c\x5c"))  (re.++  (str.to.re "\x5c\x5c")  (re.union  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b"))))))  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b"))))))))) )  (re.union  (str.to.re "\x5c\x22")  (str.to.re "\x27"))))) )  (str.to.re "\x5c\x7d"))))) ) (re.+  (re.union  (re.++  (str.to.re "\x5c\x5c")  (re.union  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b"))))))  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b"))))))))  (re.++ (re.opt  (re.union  (str.to.re "\x5c\x22")  (str.to.re "\x27")) )  (str.to.re "\x5c\x5c"))) )) (re.++  (str.to.re "\x26") (re.++ (re.+  (re.union  (re.++  (str.to.re "\x5c\x5c")  (re.union  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b"))))))  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b"))))))))  (re.++ (re.opt  (re.union  (str.to.re "\x5c\x22")  (str.to.re "\x27")) )  (str.to.re "\x5c\x5c"))) ) (re.++  (str.to.re "\x26") (re.++  (re.++  (str.to.re "\x5c\x24") (re.* re.allchar )) (re.++  (str.to.re "\x26")  (re.++ "" (re.* "" )))))))) 
suffix :SmtNode{intersectionRegexes=[!"A\!A!\!"A\!A\!"A\!A!\!"A\!A\!]}
suffix : (re.++  (str.to.re "\x21") (re.++  (str.to.re "\x22") (re.++  (str.to.re "\x41") (re.++  (str.to.re "\x5c\x21") (re.++  (str.to.re "\x41") (re.++  (str.to.re "\x21") (re.++  (str.to.re "\x5c\x21") (re.++  (str.to.re "\x22") (re.++  (str.to.re "\x41") (re.++  (str.to.re "\x5c\x21") (re.++  (str.to.re "\x41") (re.++  (str.to.re "\x5c\x21") (re.++  (str.to.re "\x22") (re.++  (str.to.re "\x41") (re.++  (str.to.re "\x5c\x21") (re.++  (str.to.re "\x41") (re.++  (str.to.re "\x21") (re.++  (str.to.re "\x5c\x21") (re.++  (str.to.re "\x22") (re.++  (str.to.re "\x41") (re.++  (str.to.re "\x5c\x21") (re.++  (str.to.re "\x41")  (str.to.re "\x5c\x21")))))))))))))))))))))))
Vulnerable
Attack String :";SAMSUNG-"+" "*10000+"/"
prefix :SmtNode{intersectionRegexes=[;SAMSUNG-]}
prefix : (re.++  (str.to.re "\x3b") (re.++  (str.to.re "\x53") (re.++  (str.to.re "\x41") (re.++  (str.to.re "\x4d") (re.++  (str.to.re "\x53") (re.++  (str.to.re "\x55") (re.++  (str.to.re "\x4e") (re.++  (str.to.re "\x47")  (str.to.re "\x2d")))))))))
infix :SmtNode{intersectionRegexes=[( *)&(( *)()([^\/;]+))&([^\/;]+)&(.+)]}
infix : (re.++ (re.*  (str.to.re "\x20") ) (re.++  (str.to.re "\x26") (re.++  (re.++ (re.*  (str.to.re "\x20") ) (re.++  (re.+  (re.union  (str.to.re "\x5c\x2f")  (str.to.re "\x3b")) ))) (re.++  (str.to.re "\x26") (re.++ (re.+  (re.union  (str.to.re "\x5c\x2f")  (str.to.re "\x3b")) ) (re.++  (str.to.re "\x26") (re.+ re.allchar )))))))
suffix :SmtNode{intersectionRegexes=[ [\s\S]*＆～([^\/;]+),  [\s\S]*＆～(([^\/;]+)( Build))]}
suffix :(re.inter  (re.inter  (re.++  (str.to.re "\x20") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )) (re.comp (re.+  (re.union  (str.to.re "\x5c\x2f")  (str.to.re "\x3b")) )))  (re.inter  (re.++  (str.to.re "\x20") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )) (re.comp  (re.++ (re.+  (re.union  (str.to.re "\x5c\x2f")  (str.to.re "\x3b")) )  (re.++  (str.to.re "\x20") (re.++  (str.to.re "\x42") (re.++  (str.to.re "\x75") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x6c")  (str.to.re "\x64"))))))))) )
Vulnerable
Attack String :"asus"+"ASUS"*5000+" "
prefix :SmtNode{intersectionRegexes=[asus]}
prefix : (re.++  (str.to.re "\x61") (re.++  (str.to.re "\x73") (re.++  (str.to.re "\x75")  (str.to.re "\x73"))))
infix :SmtNode{intersectionRegexes=[(.*)([ \-;]*), (.*)(ASUS)([ \-;]*)]}
infix :(re.inter  (re.++ (re.* re.allchar ) (re.*  (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x5c\x2d")  (str.to.re "\x3b"))) ))  (re.++ (re.* re.allchar ) (re.++  (re.++  (str.to.re "\x41") (re.++  (str.to.re "\x53") (re.++  (str.to.re "\x55")  (str.to.re "\x53")))) (re.*  (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x5c\x2d")  (str.to.re "\x3b"))) ))) )
suffix :SmtNode{intersectionRegexes=[ASUS[\s\S]*＆～((([ \-;]*)＆[\s\S]{1,})), ASUS[\s\S]*＆～(((([ \-;]*)＆[\s\S]{1,}))((((Transformer (Pad|Prime) |Transformer |Padfone |Nexus[ _])?)[0-9A-Za-z]+)))]}
suffix :(re.inter  (re.inter  (re.++  (str.to.re "\x41") (re.++  (str.to.re "\x53") (re.++  (str.to.re "\x55") (re.++  (str.to.re "\x53") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) ))))) (re.comp  (re.inter (re.*  (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x5c\x2d")  (str.to.re "\x3b"))) )  (re.++   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) (re.*   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )))))  (re.inter  (re.++  (str.to.re "\x41") (re.++  (str.to.re "\x53") (re.++  (str.to.re "\x55") (re.++  (str.to.re "\x53") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) ))))) (re.comp  (re.++  (re.inter (re.*  (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x5c\x2d")  (str.to.re "\x3b"))) )  (re.++   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) (re.*   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )))  (re.++ (re.opt  (re.union  (re.++  (str.to.re "\x54") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x61") (re.++  (str.to.re "\x6e") (re.++  (str.to.re "\x73") (re.++  (str.to.re "\x66") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x6d") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x20") (re.++  (re.union  (re.++  (str.to.re "\x50") (re.++  (str.to.re "\x61")  (str.to.re "\x64")))  (re.++  (str.to.re "\x50") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x6d")  (str.to.re "\x65"))))))  (str.to.re "\x20")))))))))))))) (re.union  (re.++  (str.to.re "\x54") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x61") (re.++  (str.to.re "\x6e") (re.++  (str.to.re "\x73") (re.++  (str.to.re "\x66") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x6d") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x72")  (str.to.re "\x20")))))))))))) (re.union  (re.++  (str.to.re "\x50") (re.++  (str.to.re "\x61") (re.++  (str.to.re "\x64") (re.++  (str.to.re "\x66") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x6e") (re.++  (str.to.re "\x65")  (str.to.re "\x20"))))))))  (re.++  (str.to.re "\x4e") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x78") (re.++  (str.to.re "\x75") (re.++  (str.to.re "\x73")  (re.union  (str.to.re "\x20")  (str.to.re "\x5f")))))))))) ) (re.+  (re.union (re.range "\x30" "\x39") (re.union (re.range "\x41" "\x5a") (re.range "\x61" "\x7a"))) ))))) )
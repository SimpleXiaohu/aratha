Vulnerable
Attack String :"asus "+"ASUS0"*5000+" "
prefix :SmtNode{intersectionRegexes=[(asus)(((.*)＆[\s\S]{1,}))]}
prefix : (re.++  (re.++  (str.to.re "\x61") (re.++  (str.to.re "\x73") (re.++  (str.to.re "\x75")  (str.to.re "\x73"))))  (re.inter (re.* re.allchar )  (re.++   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) (re.*   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) ))))
infix :SmtNode{intersectionRegexes=[([^
]*)&(([^
]*)(ASUS( |\-|;)*((Transformer (Pad|Prime) |Transformer |Padfone |Nexus( |_))?))(([0-9]|[A-Z]|[a-z])+))&(([0-9]|[A-Z]|[a-z])+)&(.+)]}
infix : (re.++ (re.*  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")) ) (re.++  (str.to.re "\x26") (re.++  (re.++ (re.*  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")) ) (re.++  (re.++  (str.to.re "\x41") (re.++  (str.to.re "\x53") (re.++  (str.to.re "\x55") (re.++  (str.to.re "\x53") (re.++ (re.*  (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x5c\x2d")  (str.to.re "\x3b"))) ) (re.opt  (re.union  (re.++  (str.to.re "\x54") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x61") (re.++  (str.to.re "\x6e") (re.++  (str.to.re "\x73") (re.++  (str.to.re "\x66") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x6d") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x20") (re.++  (re.union  (re.++  (str.to.re "\x50") (re.++  (str.to.re "\x61")  (str.to.re "\x64")))  (re.++  (str.to.re "\x50") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x6d")  (str.to.re "\x65"))))))  (str.to.re "\x20")))))))))))))) (re.union  (re.++  (str.to.re "\x54") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x61") (re.++  (str.to.re "\x6e") (re.++  (str.to.re "\x73") (re.++  (str.to.re "\x66") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x6d") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x72")  (str.to.re "\x20")))))))))))) (re.union  (re.++  (str.to.re "\x50") (re.++  (str.to.re "\x61") (re.++  (str.to.re "\x64") (re.++  (str.to.re "\x66") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x6e") (re.++  (str.to.re "\x65")  (str.to.re "\x20"))))))))  (re.++  (str.to.re "\x4e") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x78") (re.++  (str.to.re "\x75") (re.++  (str.to.re "\x73")  (re.union  (str.to.re "\x20")  (str.to.re "\x5f")))))))))) )))))) (re.+  (re.union (re.range "\x30" "\x39") (re.union (re.range "\x41" "\x5a") (re.range "\x61" "\x7a"))) ))) (re.++  (str.to.re "\x26") (re.++ (re.+  (re.union (re.range "\x30" "\x39") (re.union (re.range "\x41" "\x5a") (re.range "\x61" "\x7a"))) ) (re.++  (str.to.re "\x26") (re.+ re.allchar )))))))
suffix :SmtNode{intersectionRegexes=[ASUS0[\s\S]*＆～([0-9A-Za-z]+)]}
suffix : (re.inter  (re.++  (str.to.re "\x41") (re.++  (str.to.re "\x53") (re.++  (str.to.re "\x55") (re.++  (str.to.re "\x53") (re.++  (str.to.re "\x30") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )))))) (re.comp (re.+  (re.union (re.range "\x30" "\x39") (re.union (re.range "\x41" "\x5a") (re.range "\x61" "\x7a"))) )))
Vulnerable
Attack String :"{generate_code_example(\u0000)"+"(\t\t\t\t\t )"*512+" "
prefix :SmtNode{intersectionRegexes=[(\{generate_code_example)(\(\s*(.+)\s*\))]}
prefix : (re.++  (re.++  (str.to.re "\x5c\x7b") (re.++  (str.to.re "\x67") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x6e") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x61") (re.++  (str.to.re "\x74") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x5f") (re.++  (str.to.re "\x63") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x64") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x5f") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x78") (re.++  (str.to.re "\x61") (re.++  (str.to.re "\x6d") (re.++  (str.to.re "\x70") (re.++  (str.to.re "\x6c")  (str.to.re "\x65"))))))))))))))))))))))  (re.++  (str.to.re "\x5c\x28") (re.++ (re.* (re.union (re.range "\t" "\t") (re.range "\n" "\n") (re.range "\r" "\r") (str.to.re " ")) ) (re.++ (re.+ re.allchar ) (re.++ (re.* (re.union (re.range "\t" "\t") (re.range "\n" "\n") (re.range "\r" "\r") (str.to.re " ")) )  (str.to.re "\x5c\x29"))))))
infix :SmtNode{intersectionRegexes=[\(], next=SmtNode{intersectionRegexes=[\s*, .+], next=SmtNode{intersectionRegexes=[], next=SmtNode{intersectionRegexes=[\s*\)]}}}}
infix : (str.to.re "\x5c\x28") (re.inter (re.* (re.union (re.range "\t" "\t") (re.range "\n" "\n") (re.range "\r" "\r") (str.to.re " ")) ) (re.+ re.allchar ) )   (re.++ (re.* (re.union (re.range "\t" "\t") (re.range "\n" "\n") (re.range "\r" "\r") (str.to.re " ")) )  (str.to.re "\x5c\x29"))
suffix :SmtNode{intersectionRegexes=[\(		\)[\s\S]*＆～(\(\s*(.+)\s*\)), \(		\)[\s\S]*＆～((\(\s*(.+)\s*\))(\|\s*(.+)\s*\|\s*(.+)\s*(\(\s*(.+)\s*\))?\}))]}
suffix :(re.inter  (re.inter  (re.++  (str.to.re "\x5c\x28") (re.++  (str.to.re "\x09") (re.++  (str.to.re "\x09") (re.++  (str.to.re "\x5c\x29") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) ))))) (re.comp  (re.++  (str.to.re "\x5c\x28") (re.++ (re.* (re.union (re.range "\t" "\t") (re.range "\n" "\n") (re.range "\r" "\r") (str.to.re " ")) ) (re.++ (re.+ re.allchar ) (re.++ (re.* (re.union (re.range "\t" "\t") (re.range "\n" "\n") (re.range "\r" "\r") (str.to.re " ")) )  (str.to.re "\x5c\x29")))))))  (re.inter  (re.++  (str.to.re "\x5c\x28") (re.++  (str.to.re "\x09") (re.++  (str.to.re "\x09") (re.++  (str.to.re "\x5c\x29") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) ))))) (re.comp  (re.++  (re.++  (str.to.re "\x5c\x28") (re.++ (re.* (re.union (re.range "\t" "\t") (re.range "\n" "\n") (re.range "\r" "\r") (str.to.re " ")) ) (re.++ (re.+ re.allchar ) (re.++ (re.* (re.union (re.range "\t" "\t") (re.range "\n" "\n") (re.range "\r" "\r") (str.to.re " ")) )  (str.to.re "\x5c\x29")))))  (re.++  (str.to.re "\x5c\x7c") (re.++ (re.* (re.union (re.range "\t" "\t") (re.range "\n" "\n") (re.range "\r" "\r") (str.to.re " ")) ) (re.++ (re.+ re.allchar ) (re.++ (re.* (re.union (re.range "\t" "\t") (re.range "\n" "\n") (re.range "\r" "\r") (str.to.re " ")) ) (re.++  (str.to.re "\x5c\x7c") (re.++ (re.* (re.union (re.range "\t" "\t") (re.range "\n" "\n") (re.range "\r" "\r") (str.to.re " ")) ) (re.++ (re.+ re.allchar ) (re.++ (re.* (re.union (re.range "\t" "\t") (re.range "\n" "\n") (re.range "\r" "\r") (str.to.re " ")) ) (re.++ (re.opt  (re.++  (str.to.re "\x5c\x28") (re.++ (re.* (re.union (re.range "\t" "\t") (re.range "\n" "\n") (re.range "\r" "\r") (str.to.re " ")) ) (re.++ (re.+ re.allchar ) (re.++ (re.* (re.union (re.range "\t" "\t") (re.range "\n" "\n") (re.range "\r" "\r") (str.to.re " ")) )  (str.to.re "\x5c\x29"))))) )  (str.to.re "\x5c\x7d"))))))))))))) )
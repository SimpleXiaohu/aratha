Vulnerable
Attack String :"{generate_code_example(\u0000)"+"(\t\t\t\t\t\u0000)"*512+"◎"
prefix :SmtNode{intersectionRegexes=[(\{generate_code_example)(\(\s*(.+)\s*\))]}
prefix : (re.++  (re.++  (str.to.re "\x5c\x7b") (re.++  (str.to.re "\x67") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x6e") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x61") (re.++  (str.to.re "\x74") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x5f") (re.++  (str.to.re "\x63") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x64") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x5f") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x78") (re.++  (str.to.re "\x61") (re.++  (str.to.re "\x6d") (re.++  (str.to.re "\x70") (re.++  (str.to.re "\x6c")  (str.to.re "\x65"))))))))))))))))))))))  (re.++  (str.to.re "\x5c\x28") (re.++ (re.* (re.union (re.range "\t" "\t") (re.range "\n" "\n") (re.range "\r" "\r") (str.to.re " ")) ) (re.++ (re.+ re.allchar ) (re.++ (re.* (re.union (re.range "\t" "\t") (re.range "\n" "\n") (re.range "\r" "\r") (str.to.re " ")) )  (str.to.re "\x5c\x29"))))))
infix :SmtNode{intersectionRegexes=[(\()&(.{0,})], next=SmtNode{intersectionRegexes=[([ 
	]*)&([ 
	]*)&(.{5,})], next=SmtNode{intersectionRegexes=[(([^
]+))&(.{0,})], next=SmtNode{intersectionRegexes=[(\))&(.{0,})]}}}}
infix : (re.++  (str.to.re "\x5c\x28") (re.++  (str.to.re "\x26")  (re.++ "" (re.* "" ))))  (re.++ (re.*  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b")))))) ) (re.++  (str.to.re "\x26") (re.++ (re.*  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b")))))) ) (re.++  (str.to.re "\x26")  (re.++  (re.++ re.allchar (re.++ re.allchar (re.++ re.allchar (re.++ re.allchar re.allchar)))) (re.*  (re.++ re.allchar (re.++ re.allchar (re.++ re.allchar (re.++ re.allchar re.allchar)))) ))))))  (re.++ (re.+  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")) ) (re.++  (str.to.re "\x26")  (re.++ "" (re.* "" ))))  (re.++  (str.to.re "\x5c\x29") (re.++  (str.to.re "\x26")  (re.++ "" (re.* "" ))))
suffix :SmtNode{intersectionRegexes=[◎]}
suffix : (str.to.re "\x25ce")
Vulnerable
Attack String :"rgba( "+"\t"*5000+"\r"
prefix :SmtNode{intersectionRegexes=[(rgba\()((([ \n\r\t]*)＆[\s\S]{1,}))]}
prefix : (re.++  (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x67") (re.++  (str.to.re "\x62") (re.++  (str.to.re "\x61")  (str.to.re "\x5c\x28")))))  (re.inter (re.*  (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x5c\x6e") (re.union  (str.to.re "\x5c\x72")  (str.to.re "\x5c\x74")))) )  (re.++   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) (re.*   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) ))))
infix :SmtNode{intersectionRegexes=[(( |
||	)*)&((( |
||	)*)()([^
]+))&([^
]+)&(.+)]}
infix : (re.++ (re.*  (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d")  (str.to.re "\x09")))) ) (re.++  (str.to.re "\x26") (re.++  (re.++ (re.*  (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d")  (str.to.re "\x09")))) ) (re.++  (re.+  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")) ))) (re.++  (str.to.re "\x26") (re.++ (re.+  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")) ) (re.++  (str.to.re "\x26") (re.+ re.allchar )))))))
suffix :SmtNode{intersectionRegexes=[ [\s\S]*＆～(.+),  [\s\S]*＆～((.+)([ \n\r\t]*\)))]}
suffix :(re.inter  (re.inter  (re.++  (str.to.re "\x20") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )) (re.comp (re.+ re.allchar )))  (re.inter  (re.++  (str.to.re "\x20") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )) (re.comp  (re.++ (re.+ re.allchar )  (re.++ (re.*  (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x5c\x6e") (re.union  (str.to.re "\x5c\x72")  (str.to.re "\x5c\x74")))) )  (str.to.re "\x5c\x29"))))) )
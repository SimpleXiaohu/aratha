Vulnerable
Attack String :"HbbTV/1.1.1CE-HTML/1.1;THOM"+" "*10000+" "
prefix :SmtNode{intersectionRegexes=[HbbTV/1.1.1CE-HTML/1.1;THOM]}
prefix : (re.++  (str.to.re "\x48") (re.++  (str.to.re "\x62") (re.++  (str.to.re "\x62") (re.++  (str.to.re "\x54") (re.++  (str.to.re "\x56") (re.++  (str.to.re "\x2f") (re.++  (str.to.re "\x31") (re.++ re.allchar (re.++  (str.to.re "\x31") (re.++ re.allchar (re.++  (str.to.re "\x31") (re.++  (str.to.re "\x43") (re.++  (str.to.re "\x45") (re.++  (str.to.re "\x2d") (re.++  (str.to.re "\x48") (re.++  (str.to.re "\x54") (re.++  (str.to.re "\x4d") (re.++  (str.to.re "\x4c") (re.++  (str.to.re "\x2f") (re.++  (str.to.re "\x31") (re.++ re.allchar (re.++  (str.to.re "\x31") (re.++  (str.to.re "\x3b") (re.++  (str.to.re "\x54") (re.++  (str.to.re "\x48") (re.++  (str.to.re "\x4f")  (str.to.re "\x4d")))))))))))))))))))))))))))
infix :SmtNode{intersectionRegexes=[([^;]*)((.*SW-Version\/.*)*), ([^;]*)([\s;])((.*SW-Version\/.*)*)]}
infix :(re.inter  (re.++ (re.*  (str.to.re "\x3b") ) (re.*  (re.++ (re.* re.allchar ) (re.++  (str.to.re "\x53") (re.++  (str.to.re "\x57") (re.++  (str.to.re "\x2d") (re.++  (str.to.re "\x56") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x73") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x6e") (re.++  (str.to.re "\x5c\x2f") (re.* re.allchar ))))))))))))) ))  (re.++ (re.*  (str.to.re "\x3b") ) (re.++  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))  (str.to.re "\x3b")) (re.*  (re.++ (re.* re.allchar ) (re.++  (str.to.re "\x53") (re.++  (str.to.re "\x57") (re.++  (str.to.re "\x2d") (re.++  (str.to.re "\x56") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x73") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x6e") (re.++  (str.to.re "\x5c\x2f") (re.* re.allchar ))))))))))))) ))) )
suffix :SmtNode{intersectionRegexes=[ [\s\S]*＆～((((.*SW-Version\/.*)*)＆[\s\S]{1,})),  [\s\S]*＆～(((((.*SW-Version\/.*)*)＆[\s\S]{1,}))((LF[^;]+);?))]}
suffix :(re.inter  (re.inter  (re.++  (str.to.re "\x20") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )) (re.comp  (re.inter (re.*  (re.++ (re.* re.allchar ) (re.++  (str.to.re "\x53") (re.++  (str.to.re "\x57") (re.++  (str.to.re "\x2d") (re.++  (str.to.re "\x56") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x73") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x6e") (re.++  (str.to.re "\x5c\x2f") (re.* re.allchar ))))))))))))) )  (re.++   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) (re.*   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )))))  (re.inter  (re.++  (str.to.re "\x20") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )) (re.comp  (re.++  (re.inter (re.*  (re.++ (re.* re.allchar ) (re.++  (str.to.re "\x53") (re.++  (str.to.re "\x57") (re.++  (str.to.re "\x2d") (re.++  (str.to.re "\x56") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x73") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x6e") (re.++  (str.to.re "\x5c\x2f") (re.* re.allchar ))))))))))))) )  (re.++   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) (re.*   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )))  (re.++  (re.++  (str.to.re "\x4c") (re.++  (str.to.re "\x46") (re.+  (str.to.re "\x3b") ))) (re.opt  (str.to.re "\x3b") ))))) )
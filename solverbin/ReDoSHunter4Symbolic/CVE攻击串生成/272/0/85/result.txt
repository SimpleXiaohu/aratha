Vulnerable
Attack String :"HbbTV/1.1.1CE-HTML/1.1;THOM;"+"/SW-Version"*128+" "
prefix :SmtNode{intersectionRegexes=[HbbTV/1.1.1CE-HTML/1.1;THOM;]}
prefix : (re.++  (str.to.re "\x48") (re.++  (str.to.re "\x62") (re.++  (str.to.re "\x62") (re.++  (str.to.re "\x54") (re.++  (str.to.re "\x56") (re.++  (str.to.re "\x2f") (re.++  (str.to.re "\x31") (re.++ re.allchar (re.++  (str.to.re "\x31") (re.++ re.allchar (re.++  (str.to.re "\x31") (re.++  (str.to.re "\x43") (re.++  (str.to.re "\x45") (re.++  (str.to.re "\x2d") (re.++  (str.to.re "\x48") (re.++  (str.to.re "\x54") (re.++  (str.to.re "\x4d") (re.++  (str.to.re "\x4c") (re.++  (str.to.re "\x2f") (re.++  (str.to.re "\x31") (re.++ re.allchar (re.++  (str.to.re "\x31") (re.++  (str.to.re "\x3b") (re.++  (str.to.re "\x54") (re.++  (str.to.re "\x48") (re.++  (str.to.re "\x4f") (re.++  (str.to.re "\x4d")  (str.to.re "\x3b"))))))))))))))))))))))))))))
infix :SmtNode{intersectionRegexes=[()&(.{0,})], next=SmtNode{intersectionRegexes=[([^
]*)&(\/)&(.{1,})], next=SmtNode{intersectionRegexes=[(SW-Version)&(.{0,})], next=SmtNode{intersectionRegexes=[([^
]*)&(.{0,})]}}}}
infix : (re.++  (re.++  (str.to.re "\x26")  (re.++ "" (re.* "" ))))  (re.++ (re.*  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")) ) (re.++  (str.to.re "\x26") (re.++  (str.to.re "\x5c\x2f") (re.++  (str.to.re "\x26")  (re.++  re.allchar (re.*  re.allchar ))))))  (re.++  (re.++  (str.to.re "\x53") (re.++  (str.to.re "\x57") (re.++  (str.to.re "\x2d") (re.++  (str.to.re "\x56") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x73") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x6f")  (str.to.re "\x6e")))))))))) (re.++  (str.to.re "\x26")  (re.++ "" (re.* "" ))))  (re.++ (re.*  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")) ) (re.++  (str.to.re "\x26")  (re.++ "" (re.* "" ))))
suffix :SmtNode{intersectionRegexes=[\/SW\-Version[\s\S]*＆～(.*SW-Version\/.*), \/SW\-Version[\s\S]*＆～((.*SW-Version\/.*)((LF[^;]+);?))]}
suffix :(re.inter  (re.inter  (re.++  (str.to.re "\x5c\x2f") (re.++  (str.to.re "\x53") (re.++  (str.to.re "\x57") (re.++  (str.to.re "\x5c\x2d") (re.++  (str.to.re "\x56") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x73") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x6e") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )))))))))))) (re.comp  (re.++ (re.* re.allchar ) (re.++  (str.to.re "\x53") (re.++  (str.to.re "\x57") (re.++  (str.to.re "\x2d") (re.++  (str.to.re "\x56") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x73") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x6e") (re.++  (str.to.re "\x5c\x2f") (re.* re.allchar )))))))))))))))  (re.inter  (re.++  (str.to.re "\x5c\x2f") (re.++  (str.to.re "\x53") (re.++  (str.to.re "\x57") (re.++  (str.to.re "\x5c\x2d") (re.++  (str.to.re "\x56") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x73") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x6e") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )))))))))))) (re.comp  (re.++  (re.++ (re.* re.allchar ) (re.++  (str.to.re "\x53") (re.++  (str.to.re "\x57") (re.++  (str.to.re "\x2d") (re.++  (str.to.re "\x56") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x73") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x6e") (re.++  (str.to.re "\x5c\x2f") (re.* re.allchar )))))))))))))  (re.++  (re.++  (str.to.re "\x4c") (re.++  (str.to.re "\x46") (re.+  (str.to.re "\x3b") ))) (re.opt  (str.to.re "\x3b") ))))) )
Vulnerable
Attack String :".A"+".0b="*5000+""
prefix :SmtNode{intersectionRegexes=[((\.\w+))]}
prefix : (re.++  (str.to.re "\x5c\x2e") (re.+ (re.union (re.range "a" "z") (re.range "A" "Z") (re.range "0" "9") (str.to.re "_")) ))
infix :SmtNode{intersectionRegexes=[(((\.[A-Za-z0-9_]+\b)([ 
	]*=[ 
	]*)[^;]*)([ 
	]*))&(((\.[A-Za-z0-9_]+\b)([ 
	]*=[ 
	]*)[^;]*)()([ 
	]*))&(.+)]}
infix : (re.++  (re.++  (re.++  (re.++  (str.to.re "\x5c\x2e") (re.++ (re.+  (re.union (re.range "\x41" "\x5a") (re.union (re.range "\x61" "\x7a") (re.union (re.range "\x30" "\x39")  (str.to.re "\x5f")))) ) )) (re.++  (re.++ (re.*  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b")))))) ) (re.++  (str.to.re "\x3d") (re.*  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b")))))) ))) (re.*  (str.to.re "\x3b") ))) (re.*  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b")))))) )) (re.++  (str.to.re "\x26") (re.++  (re.++  (re.++  (re.++  (str.to.re "\x5c\x2e") (re.++ (re.+  (re.union (re.range "\x41" "\x5a") (re.union (re.range "\x61" "\x7a") (re.union (re.range "\x30" "\x39")  (str.to.re "\x5f")))) ) )) (re.++  (re.++ (re.*  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b")))))) ) (re.++  (str.to.re "\x3d") (re.*  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b")))))) ))) (re.*  (str.to.re "\x3b") ))) (re.++  (re.*  (re.union  (str.to.re "\x0c") (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x0a") (re.union  (str.to.re "\x0d") (re.union  (str.to.re "\x09")  (str.to.re "\x0b")))))) ))) (re.++  (str.to.re "\x26") (re.+ re.allchar )))))
suffix :SmtNode{intersectionRegexes=[]}
suffix :
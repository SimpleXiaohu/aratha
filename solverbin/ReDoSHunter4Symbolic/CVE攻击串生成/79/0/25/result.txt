Vulnerable
Attack String :"trident1rv:"+".A"*5000+"\r"
prefix :SmtNode{intersectionRegexes=[trident1rv:]}
prefix : (re.++  (str.to.re "\x74") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x64") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x6e") (re.++  (str.to.re "\x74") (re.++  (str.to.re "\x31") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x76")  (str.to.re "\x3a")))))))))))
infix :SmtNode{intersectionRegexes=[[\.\w]+, ([\.\w]+)(.+), .+]}
infix :(re.inter (re.+  (re.union  (str.to.re "\x5c\x2e") (re.union (re.range "a" "z") (re.range "A" "Z") (re.range "0" "9") (str.to.re "_"))) )  (re.++ (re.+  (re.union  (str.to.re "\x5c\x2e") (re.union (re.range "a" "z") (re.range "A" "Z") (re.range "0" "9") (str.to.re "_"))) ) (re.+ re.allchar )) (re.+ re.allchar ) )
suffix :SmtNode{intersectionRegexes=[\.A[\s\S]*＆～(.+), \.A[\s\S]*＆～((.+)(like\sgecko))]}
suffix :(re.inter  (re.inter  (re.++  (str.to.re "\x5c\x2e") (re.++  (str.to.re "\x41") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) ))) (re.comp (re.+ re.allchar )))  (re.inter  (re.++  (str.to.re "\x5c\x2e") (re.++  (str.to.re "\x41") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) ))) (re.comp  (re.++ (re.+ re.allchar )  (re.++  (str.to.re "\x6c") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x6b") (re.++  (str.to.re "\x65") (re.++ (re.union (re.range "\t" "\t") (re.range "\n" "\n") (re.range "\r" "\r") (str.to.re " ")) (re.++  (str.to.re "\x67") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x63") (re.++  (str.to.re "\x6b")  (str.to.re "\x6f"))))))))))))) )
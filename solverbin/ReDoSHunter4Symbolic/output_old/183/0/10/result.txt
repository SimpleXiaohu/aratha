Vulnerable
Attack String :"iPad "+"Mac OS XVersion/0"*5000+" "
prefix :SmtNode{intersectionRegexes=[((iPhone|iPad|iPod))(((.*)＆[\s\S]{1,}))]}
prefix : (re.++  (re.union  (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x50") (re.++  (str.to.re "\x68") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x6e")  (str.to.re "\x65")))))) (re.union  (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x50") (re.++  (str.to.re "\x61")  (str.to.re "\x64"))))  (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x50") (re.++  (str.to.re "\x6f")  (str.to.re "\x64"))))))  (re.inter (re.* re.allchar )  (re.++   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) (re.*   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) ))))
infix :SmtNode{intersectionRegexes=[(([^
]*)([0-9]+))&(([^
]*)(Mac OS X[^
]*Version\/)([0-9]+))&(.+)]}
infix : (re.++  (re.++ (re.*  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")) ) (re.+ (re.range "\x30" "\x39") )) (re.++  (str.to.re "\x26") (re.++  (re.++ (re.*  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")) ) (re.++  (re.++  (str.to.re "\x4d") (re.++  (str.to.re "\x61") (re.++  (str.to.re "\x63") (re.++  (str.to.re "\x20") (re.++  (str.to.re "\x4f") (re.++  (str.to.re "\x53") (re.++  (str.to.re "\x20") (re.++  (str.to.re "\x58") (re.++ (re.*  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")) ) (re.++  (str.to.re "\x56") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x73") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x6e")  (str.to.re "\x5c\x2f"))))))))))))))))) (re.+ (re.range "\x30" "\x39") ))) (re.++  (str.to.re "\x26") (re.+ re.allchar )))))
suffix :SmtNode{intersectionRegexes=[Mac OS XVersion\/0[\s\S]*＆～(\d+), Mac OS XVersion\/0[\s\S]*＆～((\d+)(\.(\d+)))]}
suffix :(re.inter  (re.inter  (re.++  (str.to.re "\x4d") (re.++  (str.to.re "\x61") (re.++  (str.to.re "\x63") (re.++  (str.to.re "\x20") (re.++  (str.to.re "\x4f") (re.++  (str.to.re "\x53") (re.++  (str.to.re "\x20") (re.++  (str.to.re "\x58") (re.++  (str.to.re "\x56") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x73") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x6e") (re.++  (str.to.re "\x5c\x2f") (re.++  (str.to.re "\x30") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )))))))))))))))))) (re.comp (re.+ (re.range "0" "9") )))  (re.inter  (re.++  (str.to.re "\x4d") (re.++  (str.to.re "\x61") (re.++  (str.to.re "\x63") (re.++  (str.to.re "\x20") (re.++  (str.to.re "\x4f") (re.++  (str.to.re "\x53") (re.++  (str.to.re "\x20") (re.++  (str.to.re "\x58") (re.++  (str.to.re "\x56") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x73") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x6e") (re.++  (str.to.re "\x5c\x2f") (re.++  (str.to.re "\x30") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )))))))))))))))))) (re.comp  (re.++ (re.+ (re.range "0" "9") )  (re.++  (str.to.re "\x5c\x2e") (re.+ (re.range "0" "9") ))))) )
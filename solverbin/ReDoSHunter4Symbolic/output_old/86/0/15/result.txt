Vulnerable
Attack String :"HTC "+" "*5000+"A◎\nA◎\n"
prefix :SmtNode{intersectionRegexes=[((HTC\/|HTC\/[0-9a-z]+\/)?HTC[ \-;_]?)((( *)＆[\s\S]{1,}))]}
prefix : (re.++  (re.++ (re.opt  (re.union  (re.++  (str.to.re "\x48") (re.++  (str.to.re "\x54") (re.++  (str.to.re "\x43")  (str.to.re "\x5c\x2f"))))  (re.++  (str.to.re "\x48") (re.++  (str.to.re "\x54") (re.++  (str.to.re "\x43") (re.++  (str.to.re "\x5c\x2f") (re.++ (re.+  (re.union (re.range "\x30" "\x39") (re.range "\x61" "\x7a")) )  (str.to.re "\x5c\x2f"))))))) ) (re.++  (str.to.re "\x48") (re.++  (str.to.re "\x54") (re.++  (str.to.re "\x43") (re.opt  (re.union  (str.to.re "\x20") (re.union  (str.to.re "\x5c\x2d") (re.union  (str.to.re "\x3b")  (str.to.re "\x5f")))) )))))  (re.inter (re.*  (str.to.re "\x20") )  (re.++   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) (re.*   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) ))))
infix :SmtNode{intersectionRegexes=[( *)&(( *)()([^
]*))&([^
]*)&(.+)]}
infix : (re.++ (re.*  (str.to.re "\x20") ) (re.++  (str.to.re "\x26") (re.++  (re.++ (re.*  (str.to.re "\x20") ) (re.++  (re.*  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")) ))) (re.++  (str.to.re "\x26") (re.++ (re.*  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")) ) (re.++  (str.to.re "\x26") (re.+ re.allchar )))))))
suffix :SmtNode{intersectionRegexes=[A◎
A◎
]}
suffix : (re.++  (str.to.re "\x41") (re.++  (str.to.re "\x25ce") (re.++  (str.to.re "\x0a") (re.++  (str.to.re "\x41") (re.++  (str.to.re "\x25ce")  (str.to.re "\x0a"))))))
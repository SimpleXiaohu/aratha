Vulnerable
Attack String :";IRIS"+" "*5000+"\r"
prefix :SmtNode{intersectionRegexes=[;IRIS]}
prefix : (re.++  (str.to.re "\x3b") (re.++  (str.to.re "\x49") (re.++  (str.to.re "\x52") (re.++  (str.to.re "\x49")  (str.to.re "\x53")))))
infix :SmtNode{intersectionRegexes=[[^\/;\)]+, ([^\/;\)]+)( *),  *]}
infix :(re.inter (re.+  (re.union  (str.to.re "\x5c\x2f") (re.union  (str.to.re "\x3b")  (str.to.re "\x5c\x29"))) )  (re.++ (re.+  (re.union  (str.to.re "\x5c\x2f") (re.union  (str.to.re "\x3b")  (str.to.re "\x5c\x29"))) ) (re.*  (str.to.re "\x20") )) (re.*  (str.to.re "\x20") ) )
suffix :SmtNode{intersectionRegexes=[ [\s\S]*＆～((( *)＆[\s\S]{1,})),  [\s\S]*＆～(((( *)＆[\s\S]{1,}))((;|\)|Build)))]}
suffix :(re.inter  (re.inter  (re.++  (str.to.re "\x20") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )) (re.comp  (re.inter (re.*  (str.to.re "\x20") )  (re.++   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) (re.*   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )))))  (re.inter  (re.++  (str.to.re "\x20") (re.*  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )) (re.comp  (re.++  (re.inter (re.*  (str.to.re "\x20") )  (re.++   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) (re.*   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) )))  (re.union  (str.to.re "\x3b") (re.union  (str.to.re "\x5c\x29")  (re.++  (str.to.re "\x42") (re.++  (str.to.re "\x75") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x6c")  (str.to.re "\x64")))))))))) )
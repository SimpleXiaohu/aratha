Vulnerable
Attack String :"HbbTV/1.1.1CE-HTML/1.0;THOM\t "+"SW-Version/"*5000+";A;"
prefix :SmtNode{intersectionRegexes=[((HbbTV)\/1\.1\.1.*CE-HTML\/1\.\d;(Vendor\/)*(THOM[^;]*)[\s;])(((.*)ï¼†[\s\S]{1,}))]}
prefix : (re.++  (re.++  (re.++  (str.to.re "\x48") (re.++  (str.to.re "\x62") (re.++  (str.to.re "\x62") (re.++  (str.to.re "\x54")  (str.to.re "\x56"))))) (re.++  (str.to.re "\x5c\x2f") (re.++  (str.to.re "\x31") (re.++  (str.to.re "\x5c\x2e") (re.++  (str.to.re "\x31") (re.++  (str.to.re "\x5c\x2e") (re.++  (str.to.re "\x31") (re.++ (re.* re.allchar ) (re.++  (str.to.re "\x43") (re.++  (str.to.re "\x45") (re.++  (str.to.re "\x2d") (re.++  (str.to.re "\x48") (re.++  (str.to.re "\x54") (re.++  (str.to.re "\x4d") (re.++  (str.to.re "\x4c") (re.++  (str.to.re "\x5c\x2f") (re.++  (str.to.re "\x31") (re.++  (str.to.re "\x5c\x2e") (re.++ (re.range "0" "9") (re.++  (str.to.re "\x3b") (re.++ (re.*  (re.++  (str.to.re "\x56") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x6e") (re.++  (str.to.re "\x64") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x72")  (str.to.re "\x5c\x2f"))))))) ) (re.++  (re.++  (str.to.re "\x54") (re.++  (str.to.re "\x48") (re.++  (str.to.re "\x4f") (re.++  (str.to.re "\x4d") (re.*  (str.to.re "\x3b") )))))  (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))  (str.to.re "\x3b"))))))))))))))))))))))))  (re.inter (re.* re.allchar )  (re.++   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) (re.*   (re.union (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " ")) (re.inter re.allchar (re.comp (re.union (str.to.re "\t") (str.to.re "\n") (str.to.re "\r") (str.to.re " "))))) ))))
infix :SmtNode{intersectionRegexes=[([^
]*)&(([^
]*)(SW-Version\/)([^
]*))&([^
]*)&(.+)]}
infix : (re.++ (re.*  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")) ) (re.++  (str.to.re "\x26") (re.++  (re.++ (re.*  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")) ) (re.++  (re.++  (str.to.re "\x53") (re.++  (str.to.re "\x57") (re.++  (str.to.re "\x2d") (re.++  (str.to.re "\x56") (re.++  (str.to.re "\x65") (re.++  (str.to.re "\x72") (re.++  (str.to.re "\x73") (re.++  (str.to.re "\x69") (re.++  (str.to.re "\x6f") (re.++  (str.to.re "\x6e")  (str.to.re "\x5c\x2f"))))))))))) (re.*  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")) ))) (re.++  (str.to.re "\x26") (re.++ (re.*  (re.union  (str.to.re "\x0a")  (str.to.re "\x0d")) ) (re.++  (str.to.re "\x26") (re.+ re.allchar )))))))
suffix :SmtNode{intersectionRegexes=[;A;]}
suffix : (re.++  (str.to.re "\x3b") (re.++  (str.to.re "\x41")  (str.to.re "\x3b")))